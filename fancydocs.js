registerProject({"title":"react-css-builder","summary":"CSS builder for creating inline react component style objects\n\nIf you want React to do native well, you need to use inline styles.  But, you can still get the DRY and maintainability benefits of an external stylesheet with react-css-builder.\n\nYou can create a javascript stylesheet similar to what you would see with a CSS precompiler but you can actually use variables calculated at runtime!\n\n```\n// *very* simple example - more advance capabilities are not demonstrated here\nvar stylesheet = require('react-css-builder').register({\n  myClass: {\n    color: 'white'\n  }\n});\n\nvar styleAttributes = stylesheet.css('myClass');\n...\nrender: function() {\n  return <div style={styleAttributes}/>\n}\n```","installation":"This is a CommonJS component only, you simply need to require ```react-css-builder``` and adding the component to ```package.json```\n```\nnpm install --save react-css-builder\n```\n","api":{"API":{"methods":{},"packages":{"react-css-builder":{"overview":"This is the object returned when calling ```require('react-css-builder')```","methods":{"register":{"profiles":["[namespace,] styleSet"],"params":{"namespace":"(string) optional namespace used if any references will be made to another styleset from the styleset being registered","styleSet":"the object representing the set of styles (kind of like a stylesheet)"},"summary":"Register a set of styles which are associated with an alias which can be referenced like a css class.","dependsOn":[],"overview":"Return the [Stylesheet](#project/jhudson8/react-css-builder/package/Stylesheet) object\n\n```\nmodule.exports = require('react-css-builder').register('some-namespace', {\n  // the stylesets can be much more advanced, this is an example most similar to CSS\n  myClass: {\n    color: 'white'\n  },\n  anotherClass: {\n    color: 'black'\n  }\n});\n```\nsee [Examples](#project/jhudson8/react-css-builder/section/Examples) to see all available options including, importing external stylesets, using mixins, variable references and nested styles."},"vars":{"profiles":["varsObject"],"params":{"varsObject":"a hash of variables to register which will be available to styleset rules (using this.get(\"varName\"))."},"summary":"```\nvar css = require('react-css-builder');\ncss.vars({\n  primaryColor: 'white'\n});","dependsOn":[],"overview":"// variables available using this.get within a stylesheet rule function\ncss.register('my-styleset-namespace', {\n  myClass: function() {\n    return color: this.get('primaryColor')\n  }\n});\n```"},"mixin":{"profiles":["mixinName, mixinFunction"],"params":{"mixinName":"the name of the mixin","mixinFunction":"the mixin function which can take any number of arguments"},"summary":"The mixin can be included in a styleset function.  It should return an object represent all style attributes which should be included.","dependsOn":[],"overview":"```\nvar css = require('react-css-builder');\ncss.mixin('background-image', function(imagePath) {\n  // silly little example\n  return {\n    backgroundImage: 'url(\\\"' + imagePath + '\\\")'\n  };\n});\n\n// mixins can be referenced using ```css.mixin``` within a stylesheet rule function (```css``` is the styleset rule function argument)\ncss.register('my-styleset', {\n  myClass: function(css) {\n    return css\n      .mixin('background-image', 'foo.gif')\n      .val();\n  }\n});\n```"}}},"Stylesheet":{"overview":"This is the object returned when calling ```require('react-css-builder').register(...)","methods":{"css":{"profiles":["className"],"params":{"className":"return the styleset object matching the className key which can be used for associated with a React component ```style``` property."},"summary":"If the ```className``` value has ```.``` values in it, styleset rules will be referenced as nested objects.","dependsOn":[],"overview":"```\nvar stylesheet = require('react-css-builder').register({\n  panel: {\n    // attributes is a special key used when nesting if the current level should have style attributes\n    attributes: {\n      color: 'white'\n    },\n    header: {\n      color: 'black'\n    }\n  }\n});\nstylesheet.css('panel'); // = {color: 'white'}\nstylesheet.css('panel.header'); // = {color: 'black'}\n```"},"get":{"profiles":["className"],"params":{"className":"return the styleset object matching the className key which can be used for associated with a React component ```style``` property."},"summary":"Very much like the previously described ```css``` method but allows for additional variables and style attributes to be provided.  The ```css``` method is used to return the style response.","dependsOn":[],"overview":"Returns a [StylesetBuilder](#project/jhudson8/react-css-builder/package/StylesetBuilder)\n\n```\nvar stylesheet = require('...').register(...)\nstylesheet.get('myStyle')\n  .vars({\n    foo: 'this var will be available in the styleset function / mixin function as this.get(\"foo\")'\n  })\n  .attr({\n    content: 'this will be an additional attribute included in the returned styleset'\n  })\n  // this returns the styleset value\n  .css();\n```"},"mixin":{"profiles":["mixinName, mixinFunction"],"params":{"mixinName":"the name of the mixin","mixinFunction":"the mixin function which can take any number of arguments"},"summary":"Exactly the same as [react-css-builder mixin](#link/%23project%2Fjhudson8%2Freact-css-builder%2Fmethod%2Freact-css-builder%2Fmixin) except that the mixin registered will *only* be accessable to this particular stylesheet.","dependsOn":[],"overview":""},"vars":{"profiles":["varsObject"],"params":{"varsObject":"a hash of variables to register which will be available to styleset rules (using this.get(\"varName\"))."},"summary":"Exactly the same as [react-css-builder vars](#link/l%23project%2Fjhudson8%2Freact-css-builder%2Fmethod%2Freact-css-builder%2Fvars) except that the provided variables will *only* be accessable to this particular stylesheet.","dependsOn":[],"overview":""}}},"StylesetBuilder":{"overview":"This is the object returned when calling ```get``` from a [StylesetBuilder](#link/%23project%2Fjhudson8%2Freact-css-builder%2Fpackage%2FStylesetBuilder).  It is used to apply variables and attributes to a styleset request.","methods":{"attr":{"profiles":["styleAttributes"],"params":{"styleAttributes":"Additional attributes that should be included with the attributes defined with the styleset defined by the class name."},"summary":"```\nvar stylesheet = require('...').register({\n  myStyleClass: {\n    backgroundColor: 'black'\n  }\n});\nvar myStyle = stylesheet.get('myStyleClass').attr({color: 'white'}).css();\n// will be {color: 'white', backgroundColor: 'black'}\n```","dependsOn":[],"overview":""},"vars":{"profiles":["variables"],"params":{"variables":"Object specifying additional variables to be made accessable to the styleset function or referenced mixin functions as ```this.get(\"varName\")```"},"summary":"```\nvar stylesheet = require('...').register({\n  myStyleClass: function() {\n    var radius = this.get('radius');\n    return {\n      borderRadius: radius,\n      WebkitBorderRadius: radius\n    }\n  }\n});\nvar myStyle = stylesheet.get('myStyleClass').var({radius: 3}).css();\n// will be {borderRadius: 3, WebkitBorderRadius: 3}\n```","dependsOn":[],"overview":""}}},"StyleContext":{"overview":"This is the object provided as the single argument a styleset if the styleset value is a function rather than a simple object specifying the style attributes.","methods":{"include":{"profiles":["stylesetName"],"params":{"stylesetName":"the name of a styleset in the current stylesheet or, if prefixed with the namespace separated by a ```.```, the name of a styleset in another stylesheet."},"summary":"Include all of the attributes defined by another styleset.","dependsOn":[],"overview":"```\nvar stylesheet = require('...').register({\n  anotherStyleClass: {\n    color: 'white'\n  },\n  myStyleClass: function(css) {\n    return css\n      .include('anotherStyleClass')\n      .val();\n  }\n});\nvar myStyle = stylesheet.css('myStyleClass');\n// will be {color: 'white'}\n```"},"mixin":{"profiles":["mixinName[, mixinParameters]"],"params":{"mixinName":"the name of a registered mixin to include","mixinParameters":"any number of parameters that the mixin is expecting"},"summary":"Include all of the attributes returned by a registered by a mixin","dependsOn":[],"overview":"```\n// very silly example just to demonstrate a mixin\nvar stylesheet = require('...').register({\n  myStyleClass: function(css) {\n    return css\n      .mixin('color', 'white')\n      .val();\n  }\n});\nstylesheet.register('myMixin', function(name, value) {\n  var rtn = {};\n  rtn[name] = value;\n  return rtn;\n});\n\nvar myStyle = stylesheet.css('myStyleClass');\n// will be {color: 'white'}\n```"},"val":{"profiles":[""],"params":{},"summary":"Called when all attribute inclusions are complete to return the styleset attributes.\n```\nvar stylesheet = require('...').register({\n  myStyleClass: function(css) {\n    return css\n      // add any attributes or mixins\n      .val();\n  }\n});\n```","dependsOn":[],"overview":""}}}}}},"sections":[{"body":"","title":"Usage","sections":[{"body":"The [register](#link/%23project%2Fjhudson8%2Freact-css-builder%2Fmethod%2Freact-css-builder%2Fregister) method is used to create a new stylesheet that can be used.\n\n```\nmodule.exports = require('react-css-builder').register('optional-namespace', {\n  // include any stylesets\n  myCssClass: {\n    color: 'white'\n  }\n```","title":"Creating a stylesheet","sections":[]},{"body":"We're using \"styleset\" as the term for attributes given to a specific CSS class.  Stylesets can be implemented in 3 different ways\n\nStandard attributes\n```\n  myClass: {\n    border: 'solid 1px #000'\n  }\n```\n\nFunction returning standard attributes\n```\n  // we might do this if we want to access variables\n  myClass: function() {\n    border: this.get('border')\n  }\n```\n\nFunction which returns results from a [StyleContext](#link/%23project%2Fjhudson8%2Freact-css-builder%2Fpackage%2FStyleContext)\n```\n  // we might do this if we want to include other stylesets or use mixins\n  myClass: function(css) {\n    return css\n      .mixin(...)\n      .include(...)\n      .attr(...)\n      .val();\n  }\n```","title":"Styleset Definitions","sections":[]},{"body":"Multiple stylesets can be included with a single styleset reference.\n\n* Each styleset reference should be separated with a space or comma.\n* Nested stylesets should be sparated with ```.```.\n* multiple nested styleset references have a shorthand of parent[child1 {space or comma} child2 ...]\n\nFor example\n```\nfoo, a[b c] d[e,f], bar\n```\nwould result in the following stylets\n```\n['foo', 'a.b', 'a.c', 'd.e', 'd.f', 'bar']\n```\nMatching a stylesheet like the following\n```\n{\n  foo: { ... },\n\n  a: {\n    attributes: { ... }\n    b: { ... },\n    c: { ... }\n  },\n\n  d: {\n    attributes: { ... },\n    e: { ... },\n    f: { ... }\n  },\n\n  bar: { ... }\n}\n```","title":"Styleset Path Selectors","sections":[]},{"body":"See [Mixins API](#link/%23project%2Fjhudson8%2Freact-css-builder%2Fmethod%2Freact-css-builder%2Fmixin) to understand how to register mixins\n\nMixins can return any number of attributes that should be applied to a styleset.\n\n```\n  var stylesheet = require('react-css-builder').register({\n\n    myClassUsingMixins: function(css) {\n      return css\n        .mixin('the-mixin-name', param1, param2, ...)\n        .attr({\n          // include any additional attributes\n        })\n        .val();\n    }\n  });\n```","title":"Mixins","sections":[]},{"body":"See [Variables API](#link/%23project%2Fjhudson8%2Freact-css-builder%2Fmethod%2Freact-css-builder%2Fvars) to understand how to register variables\n\nVariables can be referenced in a styleset definition using ```this.get(\"varName\")```\n```\n  var stylesheet = require('react-css-builder').register({\n\n    myClassUsingMixins: function() {\n      return {\n        border: this.get('border')\n      }\n    }\n  });\n\n  // variables can be set globally\n  require('react-css-builder').vars({ border: 'solid 2px #000'});\n\n  // variables can be set on a specific stylesheet\n  stylesheet.vars({ border: 'solid 2px #000'});\n\n  // variables can be set when referencing the styleset directly\n  var myStyle = stylesheet.get('myClassUsingMixins').vars({ border: 'solid 2px #000'}).css();\n```","title":"Variables","sections":[]},{"body":"It is possible to merge other styleset attributes using ```include```.  Stylesets can be referenced in the current stylesheet or in another stylesheet if the styleset name is prefixed with a ```.```.\n```\n  var stylesheet = require('react-css-builder').register({\n\n    someOtherClass: {\n      width: '100%'\n    },\n\n    myClassWithIncludes: function(css) {\n      return css\n        .include('someOtherClass')\n        .attr({\n          // include any additional attributes\n        })\n        .val();\n    }\n  });\n```","title":"Includes","sections":[]}]}]});
